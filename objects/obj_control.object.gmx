<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.game_start = true;
global.block_count = 0;
global.past_block_count = 0;
global.new_block_set = false;
starting_y = room_height-4;
global.movement = 0;
global.action_taken = 0;
last_furthest_left_block = 0;
last_furthest_right_block = 0;
gamestart = true;
global.points = 0;
cur_count = 3;
global.cur_level = 0;
recover_block = 0;
goal = false; //check if you beat level score
goal_fireworks_count = 0; //var for fireworks
global.tnt_trigger = false; //bomb trigger
move_var = 6; //block move speed
var_speed = 6;
load();
chance = 100;
alarm_trigger = true;
seconds = 0;
minutes = 0;
qq = 0;
global.stacks = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();
chance = irandom_range(0,100);
alarm_trigger = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set block variables for last blocks
if goal == false
{
    if keyboard_check_pressed(vk_space) || mouse_check_button_pressed(mb_left) 
    {
        last_furthest_left_block = furthest_left_block.bbox_left;
        last_furthest_right_block = furthest_right_block.bbox_right;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Overall Game Code
if keyboard_check_pressed(vk_space) || mouse_check_button_pressed(mb_left) 
{

    randomize();
    global.movement = random_range(0, 2);
    //show_debug_message("Speed : " + string(obj_b.speed));
    if global.action_taken = 1
    {
        global.action_taken = 0;
        //show_debug_message("move "+ string(global.movement));
    }
}
            //show_debug_message("futheest right " + string(obj_control.last_furthest_right_block));
        //show_debug_message("futheest left " + string(obj_control.last_furthest_left_block));
if global.block_count &gt;= 3
{
    global.game_start = false;
}
if !instance_exists(obj_b) 
{
//show_debug_message("count block " + string(global.block_count) )

    global.new_block_set = false;
    if global.game_start = true 
    {
    player_level = real(global.total_points/1000);
        if player_level &gt; 1 &amp;&amp; player_level &lt; 10
        {
            block_i = instance_create(160, starting_y, obj_b);
            block_ii = instance_create(block_i.x+32, starting_y, obj_b);
            block_iii = instance_create(block_ii.x + 32, starting_y, obj_b);
            block_iiii = instance_create(block_iii.x + 32, starting_y, obj_b);
            
        }
        
        if player_level &gt; 10 
        {
            block_i = instance_create(128, starting_y, obj_b);
            block_ii = instance_create(block_i.x+32, starting_y, obj_b);
            block_iii = instance_create(block_ii.x + 32, starting_y, obj_b);
            block_iiii = instance_create(block_iii.x + 32, starting_y, obj_b);
            block_iiiii = instance_create(block_iiii.x + 32, starting_y, obj_b);
        }
        if player_level &lt; 1
        {
            block_i = instance_create(192, starting_y, obj_b);
            block_ii = instance_create(block_i.x+32, starting_y, obj_b);
            block_iii = instance_create(block_ii.x + 32, starting_y, obj_b);
        }
    }
    else
    {
        if global.block_count = 0 &amp;&amp; global.past_block_count = 0
        {
            if goal = false
            {
                instance_create(view_wview[0]/2, view_yview[0] + 125, obj_gameover);

                load();

                if global.highscore &lt; global.points
                {
                    global.highscore = global.points;
                }
                save();
                with self
                {
                instance_destroy();
                }
            }

        }
        else
        {
            //POINTS START
            if global.block_count != 0
            {
                if global.past_block_count == global.block_count
                {
                

                    recover_block += 1;
                    if recover_block &gt; 1
                    {
                    var i;
                    for (i = (room_width/32); i &lt;= room_width; i += 32)
                    {
                        instance_create(i, starting_y, obj_d);
                    }
            
                                    show_debug_message("PERFECT");
                                    //global.points += 99;
                    }
                    if recover_block == 2
                    {
                        global.block_count += 1;
                        global.new_block_set = true;
                        recover_block = 0;
                    }
                }
                else
                {

                    recover_block = 0;
                }
            }
            //POINTS END
            if global.block_count &gt;= 5
            {
                global.block_count = 5;
            
            }
            starting_y = starting_y - 32;
            var i;
            for (i = 0; i &lt; global.block_count; i += 1)
            {
                instance_create((room_width/2) + (32 * i), starting_y, obj_b);
            }
            //if global.block_count &gt; global.past_block_count
            //{
            
            global.past_block_count = global.block_count;
            global.block_count = 0;
        }
    }

}


if instance_exists(obj_b)
{

    furthest_left_block = instance_nearest(0, y, obj_b);
    furthest_right_block = instance_nearest(500, y, obj_b);

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Camera
if instance_exists(obj_b)
{
///Needs to be reworked
    if obj_b.y &lt; view_hview[0]/2
    {
            view_yview[0] = ((obj_b.y))-view_hview[0]/2
            //{
               // view_yview[0] -= 1;
            //}
        
    } 

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement of spawnned block
if !instance_exists(obj_b)
{
    randomize();
    global.choose_movement = random_range(0,2);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Powerups
/**
if alarm_trigger = true
{
    alarm[0] = room_speed*4;
    alarm_trigger = false;
if chance &lt;= 90 &amp;&amp; global.game_start = false
{

    if !instance_exists(obj_powerup) &amp;&amp; instance_exists(obj_b)
    {
        instance_create((random_range(34,room_width-34)),obj_b.y-600 ,obj_powerup);

    }
}
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Timer

seconds += 1/30;
if (seconds &lt; 10) &amp;&amp; (seconds &gt; 9.9)
{
    qq += 1;
    seconds = 0;
}
if (qq = 6)
{
    qq = 0;
    minutes += 1;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Audio
/**
if audio_is_playing(sfx_maintheme)
{
    audio_stop_all();
}
if !instance_exists(obj_gm_menu)
{
    if room = rm_norm
    {
        if !audio_is_playing(sfx_norm) 
        {
            audio_play_sound(sfx_norm,10,true);
        }
    }
    if room = rm_volc
    {
        if !audio_is_playing(sfx_volc) 
        {
            audio_play_sound(sfx_volc, 10, true);
        }
    }
    if room = rm_trees
    {
        if !audio_is_playing(sfx_trees) 
        {
            audio_play_sound(sfx_trees, 10, true);
        }
    }
    if room = rm_darkness
    {
        if !audio_is_playing(sfx_darkness) 
        {
            audio_play_sound(sfx_darkness, 10, true);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Points Position/text 
draw_sprite(sc, 2,0,view_yview[0] + 13 );


var i;
var g;


hs_string = string(global.points);
length_of_hs = string_length(hs_string);

for (i = 1  ; i &lt; length_of_hs+1; i += 1 )
{
g = string_char_at(hs_string, i);
draw_sprite(fnt_nums, real(g),80 + 12*i,view_yview[0] + 14 );
}



lb_string = string(global.stacks);
length_of_lb = string_length(lb_string);

for (i = 1  ; i &lt; length_of_lb+1; i += 1 )
{
g = string_char_at(lb_string, i);
draw_sprite(fnt_nums, real(g),238 + 12*i,view_yview[0] + 30 );
}


st_string = string(seconds);
length_of_st = string_length(st_string);
for (i = 1  ; i &lt; 2; i += 1 )
{
g = string_char_at(st_string, i);
draw_sprite(fnt_nums, real(g),108 + 12*i,view_yview[0] + 30 );
}

qt_string = string(qq);
length_of_qt = string_length(qt_string);
for (i = 1  ; i &lt; 2; i += 1 )
{
g = string_char_at(qt_string, i);
draw_sprite(fnt_nums, real(g),94 + 12*i,view_yview[0] + 30 );
}


mt_string = string(minutes);
length_of_mt = string_length(mt_string);

for (i = 1  ; i &lt; length_of_mt+1; i += 1 )
{
g = string_char_at(mt_string, i);
draw_sprite(fnt_nums, real(g),67 + 12*i,view_yview[0] + 30 );
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
